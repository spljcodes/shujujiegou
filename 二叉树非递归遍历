# shujujiegou
#include<stdio.h>
#include<stdlib.h>
#include<malloc.h>
#define STACK_INIT_SIZE  100
#define STACKINCREMENT    10

#define TRUE         1
#define FALSE        0
#define OK           1
#define INFEASIBLE  -1
#define OVERFLOW    -2
#define ERROR        0

typedef int Status;
typedef char TElemType;
#define MAX_TREE_SIZE 100

typedef struct BiTNode{
	TElemType data;
	int first;
	struct BiTNode *lchild ,*rchild;
}BiTNode,*BiTree;

typedef char SElemType;
typedef struct {
	BiTree   *base;
	BiTree   *top;
	int        stacksize;
}SqStack;
Status InitStack(SqStack  *S);
Status Push(SqStack  *S , BiTree  T);
Status CreateBiTree1(BiTree *T);
Status Pop(SqStack  *S , BiTree *T);
Status InOrderTraverse(BiTree T, Status (*Visit)(TElemType) );
Status Visit(TElemType e);
Status StackEmpty(SqStack S);
Status InOrderTraverse1(BiTree T, Status (*Visit)(TElemType) );
Status InOrderTraverse2(BiTree T,Status (*Visit)(TElemType) );
Status InOrderTraverse3(BiTree T,Status (*Visit)(TElemType) );
Status GetTop(SqStack S , BiTree *T);

void main(){
	BiTree p1;
	CreateBiTree1(&p1);
	printf("先序非递归输出二叉树:\n");
	InOrderTraverse1(p1,Visit);
	printf("\n");
	printf("中序非递归输出二叉树:\n");
	InOrderTraverse(p1,Visit);
	printf("\n");
	printf("中序非递归输出二叉树:\n");
	InOrderTraverse2(p1,Visit);
	printf("\n");
	printf("后序非递归输出二叉树:\n");
	InOrderTraverse3(p1,Visit);
	printf("\n");
	
}


Status CreateBiTree1(BiTree *T){
	char ch;
	scanf("%c",&ch);
	if(ch=='#') (*T) = NULL; 
	else{
		if(!( (*T)=(BiTNode *)malloc( sizeof(BiTNode) )))    exit(OVERFLOW);
		(*T)->data = ch;
		(*T)->first = 1;
		CreateBiTree1(&(*T)->lchild);
		CreateBiTree1(&(*T)->rchild);
	}
	return OK;
}
Status InitStack(SqStack  *S){
	//构建一个空栈，来存放结构体指针。
	S->base = (BiTree *)malloc(STACK_INIT_SIZE * sizeof(BiTree *));
	if( !S->base )  exit(-1);
	S->top = S->base;
	S->stacksize = STACK_INIT_SIZE;
	return OK;
}
Status Push(SqStack  *S , BiTree  T){
	//插入元素e为新的zhan顶元素
	if(S->top - S->base >= S->stacksize){
		S->base = (BiTree *)realloc(S->base,(S->stacksize + STACKINCREMENT) * sizeof(BiTree *));

		if(!S->base) exit(-1);
		S->top = S->base + S->stacksize;
		S->stacksize += STACKINCREMENT;
	}
	
	*S->top++ = T;
	return OK;
}
Status Pop(SqStack  *S , BiTree *T){
	if(S->top == S->base)  return ERROR;
	*T = *--S->top;
	return OK;
}
Status InOrderTraverse(BiTree T, Status (*Visit)(TElemType) ){
	SqStack S;  BiTree p;
	InitStack(&S);    p = T;
	while(p || !StackEmpty(S)){
		if(p) {  Push(&S,p); p = p->lchild; }
		else{
			Pop(&S,&p);  if(!Visit(p->data)) return ERROR;
			p = p->rchild;
		}
	}
	return OK;
}
Status Visit(TElemType e){
	   printf("%c",e);
	   return OK;
}  
Status StackEmpty(SqStack S){
	if(S.base==S.top)
		return 1;
	else 
		return 0;
}
Status InOrderTraverse1(BiTree T, Status (*Visit)(TElemType) ){
	SqStack S;  BiTree p;
	InitStack(&S);    p = T;
	while(p || !StackEmpty(S)){
		if(p) {  Push(&S,p); if(!Visit(p->data)) return ERROR; p = p->lchild; }
		else{
			Pop(&S,&p);  
			p = p->rchild;
		}
	}
	return OK;
}
Status InOrderTraverse2(BiTree T,Status (*Visit)(TElemType) ){
	SqStack S;  BiTree p;
	InitStack(&S); 
	Push(&S,T);
	while(!StackEmpty(S)){
		
		while(GetTop(S,&p) && p) Push(&S,p->lchild);
		Pop(&S,&p);
		GetTop(S,&p);

		if(!StackEmpty(S)){
			Pop(&S,&p); if(!Visit(p->data)) return ERROR;
			Push(&S,p->rchild);
		}

	}
	return OK;
}
Status GetTop(SqStack S , BiTree *T){
	if(S.top == S.base) return ERROR;
	*T = *(S.top-1);
	return OK;
}
Status InOrderTraverse3(BiTree T,Status (*Visit)(TElemType) ){
		SqStack S;  BiTree p,temp;
	InitStack(&S);    p = T;
	while(p!=NULL || !StackEmpty(S)){
		while(p) {  Push(&S,p); p = p->lchild; }
		if( !StackEmpty(S)){
			GetTop(S,&temp);
			Pop(&S,&p);
			if(temp->first == 1){
				temp->first = 0;
				Push(&S,temp);
				p = temp->rchild;
			}
			else{
				if(!Visit(p->data)) return ERROR;
				p = NULL;
			}
		}

	}
	return OK;
}
