# shujujiegou
#include<stdio.h>
#include<stdlib.h>
#include<malloc.h>

#define TRUE         1
#define FALSE        0
#define OK           1
#define INFEASIBLE  -1
#define OVERFLOW    -2
#define ERROR       -4
#define MAX 20

#define MAX_VERTEX_NUM   20
typedef int Status;
typedef char VertexType;
typedef struct ArcCell{
	int  adj;
  //InfoType  *info;   //存放该弧相关信息的指针
}ArcCell, AdjMatrix[MAX_VERTEX_NUM][MAX_VERTEX_NUM];


//队列的数据结构
typedef struct QNode{
	int     data;
	struct  QNode  *next;
}QNode,*QueuePtr;
typedef struct {
	QueuePtr  front;
	QueuePtr  rear;
}LinkQueue;
//

typedef struct {
	VertexType vexs[MAX_VERTEX_NUM]; //顶点向量
	AdjMatrix  arcs;
	int        vexnum,arcnum;
	//GraphKind  kind;  图的种类标志
}MGraph;
bool visited[MAX]; //
void DFSTraverse(MGraph G );
void DFS(MGraph G,int v);
Status FirstAdjVex(MGraph G,int v);
Status NextAdjVex(MGraph G,int v,int w);

Status CreateUDN(MGraph *G);
Status LocateVex(MGraph G,char v);

Status InitQueue(LinkQueue *Q);
Status EnQueue(LinkQueue *Q , int e);
Status DeQueue(LinkQueue *Q , int *e);
int QueueLength(LinkQueue Q);
void BFSTraverse(MGraph G);



void main(){
	int i,j;
	MGraph M;
	CreateUDN(&M);
	for(i=0;i<M.vexnum;++i)  {
		for(j=0;j<M.vexnum;++j)  printf("%d ",M.arcs[i][j].adj);
		printf("\n");
	}
	DFSTraverse(M);
	BFSTraverse(M);
	printf("\n");


}
Status InitQueue(LinkQueue *Q){
	Q->front = Q->rear = (QueuePtr)malloc(sizeof(QNode));
	Q->front->next = NULL;
	return OK;
}
Status EnQueue(LinkQueue *Q , int e){
	QueuePtr p;
	p = (QueuePtr)malloc(sizeof(QNode));
	if(!p) exit(OVERFLOW);
	p->data = e; p->next = NULL;
	Q->rear->next = p;//头指针没有数据
	Q->rear = p;
	return OK;
}
Status DeQueue(LinkQueue *Q,int *e){
	QueuePtr p;
	if(Q->front == Q->rear)  return ERROR;
	p = Q->front->next;   
	*e = p->data;
	Q->front->next = p->next;
	if(Q->rear == p) Q->rear = Q->front;
	free(p);//将出队的数据释放掉
	return OK;
}
int QueueLength(LinkQueue Q){
	return Q.rear-Q.front;
}


Status CreateUDN(MGraph *G){
	int i,j,k;
	char v1,v2;
	printf("请输入该图的顶点数,弧数:");
	scanf("%d%d",&G->vexnum,&G->arcnum);
	getchar();
	printf("请输入顶点的信息:");
	for(i=0;i<G->vexnum;++i)  { scanf("%c",&G->vexs[i]); }
	getchar();
	for(i=0;i<G->vexnum;++i)  
		for(j=0;j<G->vexnum;++j)  G->arcs[i][j].adj = 0; //先全部重置为0
	for(k=0;k<G->arcnum;++k){
		printf("请输入有连接的两条边(这里为无向图,例如AB):\n");
		scanf("%c%c",&v1,&v2);
		getchar();
		i = LocateVex(*G,v1);   j = LocateVex(*G,v2);
		G->arcs[i][j].adj = 1;
		G->arcs[j][i].adj = G->arcs[i][j].adj;
	}
	return OK;
}

Status LocateVex(MGraph G,char v){
	int i;
	for(i=0;i<G.vexnum;++i){
		if(v == G.vexs[i])
			break;
	}
    return i;
}
void DFSTraverse(MGraph G ){
	int v;
	for(v=0;v<G.vexnum;++v) visited[v] = FALSE;
	for(v=0;v<G.vexnum;++v) 
		if(!visited[v]) { DFS(G,v);   printf("\n");}
}
void DFS(MGraph G,int v){
	int w;
	visited[v] = TRUE;  
	printf("%c",G.vexs[v]);
	for(w = FirstAdjVex(G,v); w >= 0; w = NextAdjVex(G,v,w))
	{
		if(!visited[w])  DFS(G,w);
	}
}
Status FirstAdjVex(MGraph G,int v){
	int i;
	for(i=0;i<G.vexnum;++i)
		if(G.arcs[v][i].adj == 1)
			break;
	if(i>=G.vexnum) return -1;
	else           return i;
}
Status NextAdjVex(MGraph G,int v,int w){
	int i;
	for(i=w+1;i<G.vexnum;++i)
	if(G.arcs[v][i].adj == 1)
		break;
	if(i>=G.vexnum) return -1;
	else           return i;
}
void BFSTraverse(MGraph G){
	LinkQueue Q;
	int v,u,w;
		for(v=0;v<G.vexnum;++v) visited[v] = FALSE;
		InitQueue(&Q);
		for(v=0;v<G.vexnum;++v) 
			if(!visited[v]){
				visited[v] = TRUE;
				printf("%c",G.vexs[v]);
				EnQueue(&Q,v);
				while(QueueLength(Q)){
					DeQueue(&Q,&u);
					for(w = FirstAdjVex(G,u); w >= 0; w = NextAdjVex(G,u,w))
					{
							if(!visited[w]){
									visited[w] = TRUE; printf("%c",G.vexs[w]);
									EnQueue(&Q,w);
						}
					}
				}
			}
}
